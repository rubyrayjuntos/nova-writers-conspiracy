version: '3.8'

services:
  # PostgreSQL Database
  nova-postgres:
    image: postgres:15-alpine
    container_name: nova-postgres
    environment:
      POSTGRES_DB: nova_writers_conspiracy
      POSTGRES_USER: nova_user
      POSTGRES_PASSWORD: nova_password
    ports:
      - "5432:5432"
    volumes:
      - nova_postgres_data:/var/lib/postgresql/data
    networks:
      - nova-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nova_user -d nova_writers_conspiracy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and task queue
  nova-redis:
    image: redis:7-alpine
    container_name: nova-redis
    ports:
      - "6379:6379"
    volumes:
      - nova_redis_data:/data
    networks:
      - nova-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  nova-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: nova-backend
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@nova-postgres:5432/nova_writers_conspiracy
      - REDIS_URL=redis://nova-redis:6379
      - DEBUG=True
      - CORS_ORIGINS=["http://localhost:3000"]
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      nova-postgres:
        condition: service_healthy
      nova-redis:
        condition: service_healthy
    networks:
      - nova-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background tasks
  nova-celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: nova-celery-worker
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@nova-postgres:5432/nova_writers_conspiracy
      - REDIS_URL=redis://nova-redis:6379
      - CELERY_BROKER_URL=redis://nova-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://nova-redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      nova-postgres:
        condition: service_healthy
      nova-redis:
        condition: service_healthy
    networks:
      - nova-network
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Beat for scheduled tasks
  nova-celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: nova-celery-beat
    environment:
      - DATABASE_URL=postgresql://nova_user:nova_password@nova-postgres:5432/nova_writers_conspiracy
      - REDIS_URL=redis://nova-redis:6379
      - CELERY_BROKER_URL=redis://nova-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://nova-redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      nova-postgres:
        condition: service_healthy
      nova-redis:
        condition: service_healthy
    networks:
      - nova-network
    command: celery -A app.core.celery beat --loglevel=info

  # React Frontend
  nova-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: nova-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - nova-backend
    networks:
      - nova-network
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nova-nginx:
    image: nginx:alpine
    container_name: nova-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - nova-backend
      - nova-frontend
    networks:
      - nova-network

volumes:
  nova_postgres_data:
  nova_redis_data:

networks:
  nova-network:
    driver: bridge 